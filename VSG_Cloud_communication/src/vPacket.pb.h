// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vPacket_2eproto;
namespace videoencoding {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace videoencoding
PROTOBUF_NAMESPACE_OPEN
template<> ::videoencoding::Request* Arena::CreateMaybeMessage<::videoencoding::Request>(Arena*);
template<> ::videoencoding::Response* Arena::CreateMaybeMessage<::videoencoding::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace videoencoding {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:videoencoding.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return new Request();
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "videoencoding.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewMatrixFieldNumber = 1,
    kRealColorFieldNumber = 2,
    kRealDepthFieldNumber = 3,
  };
  // repeated double viewMatrix = 1;
  int viewmatrix_size() const;
  private:
  int _internal_viewmatrix_size() const;
  public:
  void clear_viewmatrix();
  private:
  double _internal_viewmatrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_viewmatrix() const;
  void _internal_add_viewmatrix(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_viewmatrix();
  public:
  double viewmatrix(int index) const;
  void set_viewmatrix(int index, double value);
  void add_viewmatrix(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      viewmatrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_viewmatrix();

  // bytes real_color = 2;
  void clear_real_color();
  const std::string& real_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_real_color();
  void set_allocated_real_color(std::string* real_color);
  private:
  const std::string& _internal_real_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_color(const std::string& value);
  std::string* _internal_mutable_real_color();
  public:

  // bytes real_depth = 3;
  void clear_real_depth();
  const std::string& real_depth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_depth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_depth();
  PROTOBUF_MUST_USE_RESULT std::string* release_real_depth();
  void set_allocated_real_depth(std::string* real_depth);
  private:
  const std::string& _internal_real_depth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_depth(const std::string& value);
  std::string* _internal_mutable_real_depth();
  public:

  // @@protoc_insertion_point(class_scope:videoencoding.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > viewmatrix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vPacket_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:videoencoding.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "videoencoding.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorImageFieldNumber = 1,
  };
  // bytes color_image = 1;
  void clear_color_image();
  const std::string& color_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_image();
  PROTOBUF_MUST_USE_RESULT std::string* release_color_image();
  void set_allocated_color_image(std::string* color_image);
  private:
  const std::string& _internal_color_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_image(const std::string& value);
  std::string* _internal_mutable_color_image();
  public:

  // @@protoc_insertion_point(class_scope:videoencoding.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// repeated double viewMatrix = 1;
inline int Request::_internal_viewmatrix_size() const {
  return viewmatrix_.size();
}
inline int Request::viewmatrix_size() const {
  return _internal_viewmatrix_size();
}
inline void Request::clear_viewmatrix() {
  viewmatrix_.Clear();
}
inline double Request::_internal_viewmatrix(int index) const {
  return viewmatrix_.Get(index);
}
inline double Request::viewmatrix(int index) const {
  // @@protoc_insertion_point(field_get:videoencoding.Request.viewMatrix)
  return _internal_viewmatrix(index);
}
inline void Request::set_viewmatrix(int index, double value) {
  viewmatrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:videoencoding.Request.viewMatrix)
}
inline void Request::_internal_add_viewmatrix(double value) {
  viewmatrix_.Add(value);
}
inline void Request::add_viewmatrix(double value) {
  _internal_add_viewmatrix(value);
  // @@protoc_insertion_point(field_add:videoencoding.Request.viewMatrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Request::_internal_viewmatrix() const {
  return viewmatrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Request::viewmatrix() const {
  // @@protoc_insertion_point(field_list:videoencoding.Request.viewMatrix)
  return _internal_viewmatrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Request::_internal_mutable_viewmatrix() {
  return &viewmatrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Request::mutable_viewmatrix() {
  // @@protoc_insertion_point(field_mutable_list:videoencoding.Request.viewMatrix)
  return _internal_mutable_viewmatrix();
}

// bytes real_color = 2;
inline void Request::clear_real_color() {
  real_color_.ClearToEmpty();
}
inline const std::string& Request::real_color() const {
  // @@protoc_insertion_point(field_get:videoencoding.Request.real_color)
  return _internal_real_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_real_color(ArgT0&& arg0, ArgT... args) {
 
 real_color_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:videoencoding.Request.real_color)
}
inline std::string* Request::mutable_real_color() {
  std::string* _s = _internal_mutable_real_color();
  // @@protoc_insertion_point(field_mutable:videoencoding.Request.real_color)
  return _s;
}
inline const std::string& Request::_internal_real_color() const {
  return real_color_.Get();
}
inline void Request::_internal_set_real_color(const std::string& value) {
  
  real_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_real_color() {
  
  return real_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_real_color() {
  // @@protoc_insertion_point(field_release:videoencoding.Request.real_color)
  return real_color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_real_color(std::string* real_color) {
  if (real_color != nullptr) {
    
  } else {
    
  }
  real_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:videoencoding.Request.real_color)
}

// bytes real_depth = 3;
inline void Request::clear_real_depth() {
  real_depth_.ClearToEmpty();
}
inline const std::string& Request::real_depth() const {
  // @@protoc_insertion_point(field_get:videoencoding.Request.real_depth)
  return _internal_real_depth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_real_depth(ArgT0&& arg0, ArgT... args) {
 
 real_depth_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:videoencoding.Request.real_depth)
}
inline std::string* Request::mutable_real_depth() {
  std::string* _s = _internal_mutable_real_depth();
  // @@protoc_insertion_point(field_mutable:videoencoding.Request.real_depth)
  return _s;
}
inline const std::string& Request::_internal_real_depth() const {
  return real_depth_.Get();
}
inline void Request::_internal_set_real_depth(const std::string& value) {
  
  real_depth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_real_depth() {
  
  return real_depth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_real_depth() {
  // @@protoc_insertion_point(field_release:videoencoding.Request.real_depth)
  return real_depth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_real_depth(std::string* real_depth) {
  if (real_depth != nullptr) {
    
  } else {
    
  }
  real_depth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_depth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:videoencoding.Request.real_depth)
}

// -------------------------------------------------------------------

// Response

// bytes color_image = 1;
inline void Response::clear_color_image() {
  color_image_.ClearToEmpty();
}
inline const std::string& Response::color_image() const {
  // @@protoc_insertion_point(field_get:videoencoding.Response.color_image)
  return _internal_color_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_color_image(ArgT0&& arg0, ArgT... args) {
 
 color_image_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:videoencoding.Response.color_image)
}
inline std::string* Response::mutable_color_image() {
  std::string* _s = _internal_mutable_color_image();
  // @@protoc_insertion_point(field_mutable:videoencoding.Response.color_image)
  return _s;
}
inline const std::string& Response::_internal_color_image() const {
  return color_image_.Get();
}
inline void Response::_internal_set_color_image(const std::string& value) {
  
  color_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_color_image() {
  
  return color_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_color_image() {
  // @@protoc_insertion_point(field_release:videoencoding.Response.color_image)
  return color_image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_color_image(std::string* color_image) {
  if (color_image != nullptr) {
    
  } else {
    
  }
  color_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:videoencoding.Response.color_image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace videoencoding

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vPacket_2eproto

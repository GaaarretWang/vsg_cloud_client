// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace RenderFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Material : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Material GetRootAsMaterial(ByteBuffer _bb) { return GetRootAsMaterial(_bb, new Material()); }
  public static Material GetRootAsMaterial(ByteBuffer _bb, Material obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaterialID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Diffuse { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiffuseBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDiffuseBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDiffuseArray() { return __p.__vector_as_array<byte>(6); }
  public string Specular { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecularBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSpecularBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSpecularArray() { return __p.__vector_as_array<byte>(8); }
  public float Shininess { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string DiffuseTextureName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiffuseTextureNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDiffuseTextureNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDiffuseTextureNameArray() { return __p.__vector_as_array<byte>(12); }
  public string Emissive { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmissiveBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEmissiveBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEmissiveArray() { return __p.__vector_as_array<byte>(14); }
  public float EmissiveIntensity { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Metalness { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Roughness { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Transmission { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<RenderFlatBuffer.Material> CreateMaterial(FlatBufferBuilder builder,
      int MaterialID = 0,
      StringOffset DiffuseOffset = default(StringOffset),
      StringOffset SpecularOffset = default(StringOffset),
      float Shininess = 0.0f,
      StringOffset DiffuseTextureNameOffset = default(StringOffset),
      StringOffset EmissiveOffset = default(StringOffset),
      float EmissiveIntensity = 0.0f,
      float Metalness = 0.0f,
      float Roughness = 0.0f,
      float Transmission = 0.0f) {
    builder.StartTable(10);
    Material.AddTransmission(builder, Transmission);
    Material.AddRoughness(builder, Roughness);
    Material.AddMetalness(builder, Metalness);
    Material.AddEmissiveIntensity(builder, EmissiveIntensity);
    Material.AddEmissive(builder, EmissiveOffset);
    Material.AddDiffuseTextureName(builder, DiffuseTextureNameOffset);
    Material.AddShininess(builder, Shininess);
    Material.AddSpecular(builder, SpecularOffset);
    Material.AddDiffuse(builder, DiffuseOffset);
    Material.AddMaterialID(builder, MaterialID);
    return Material.EndMaterial(builder);
  }

  public static void StartMaterial(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddMaterialID(FlatBufferBuilder builder, int materialID) { builder.AddInt(0, materialID, 0); }
  public static void AddDiffuse(FlatBufferBuilder builder, StringOffset diffuseOffset) { builder.AddOffset(1, diffuseOffset.Value, 0); }
  public static void AddSpecular(FlatBufferBuilder builder, StringOffset specularOffset) { builder.AddOffset(2, specularOffset.Value, 0); }
  public static void AddShininess(FlatBufferBuilder builder, float shininess) { builder.AddFloat(3, shininess, 0.0f); }
  public static void AddDiffuseTextureName(FlatBufferBuilder builder, StringOffset diffuseTextureNameOffset) { builder.AddOffset(4, diffuseTextureNameOffset.Value, 0); }
  public static void AddEmissive(FlatBufferBuilder builder, StringOffset emissiveOffset) { builder.AddOffset(5, emissiveOffset.Value, 0); }
  public static void AddEmissiveIntensity(FlatBufferBuilder builder, float emissiveIntensity) { builder.AddFloat(6, emissiveIntensity, 0.0f); }
  public static void AddMetalness(FlatBufferBuilder builder, float metalness) { builder.AddFloat(7, metalness, 0.0f); }
  public static void AddRoughness(FlatBufferBuilder builder, float roughness) { builder.AddFloat(8, roughness, 0.0f); }
  public static void AddTransmission(FlatBufferBuilder builder, float transmission) { builder.AddFloat(9, transmission, 0.0f); }
  public static Offset<RenderFlatBuffer.Material> EndMaterial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RenderFlatBuffer.Material>(o);
  }
}


static public class MaterialVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MaterialID*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Diffuse*/, false)
      && verifier.VerifyString(tablePos, 8 /*Specular*/, false)
      && verifier.VerifyField(tablePos, 10 /*Shininess*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*DiffuseTextureName*/, false)
      && verifier.VerifyString(tablePos, 14 /*Emissive*/, false)
      && verifier.VerifyField(tablePos, 16 /*EmissiveIntensity*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Metalness*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Roughness*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Transmission*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}

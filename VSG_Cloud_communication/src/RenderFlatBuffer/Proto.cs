// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace RenderFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Proto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Proto GetRootAsProto(ByteBuffer _bb) { return GetRootAsProto(_bb, new Proto()); }
  public static Proto GetRootAsProto(ByteBuffer _bb, Proto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Proto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ProtoID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProtoIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetProtoIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetProtoIDArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Type { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(8); }
  public RenderFlatBuffer.Model? Models(int j) { int o = __p.__offset(10); return o != 0 ? (RenderFlatBuffer.Model?)(new RenderFlatBuffer.Model()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ModelsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<RenderFlatBuffer.Proto> CreateProto(FlatBufferBuilder builder,
      StringOffset ProtoIDOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset TypeOffset = default(StringOffset),
      VectorOffset ModelsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Proto.AddModels(builder, ModelsOffset);
    Proto.AddType(builder, TypeOffset);
    Proto.AddName(builder, NameOffset);
    Proto.AddProtoID(builder, ProtoIDOffset);
    return Proto.EndProto(builder);
  }

  public static void StartProto(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddProtoID(FlatBufferBuilder builder, StringOffset protoIDOffset) { builder.AddOffset(0, protoIDOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static void AddModels(FlatBufferBuilder builder, VectorOffset modelsOffset) { builder.AddOffset(3, modelsOffset.Value, 0); }
  public static VectorOffset CreateModelsVector(FlatBufferBuilder builder, Offset<RenderFlatBuffer.Model>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, Offset<RenderFlatBuffer.Model>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<RenderFlatBuffer.Model>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<RenderFlatBuffer.Model>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RenderFlatBuffer.Proto> EndProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RenderFlatBuffer.Proto>(o);
  }
}


static public class ProtoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ProtoID*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Type*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Models*/, RenderFlatBuffer.ModelVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}

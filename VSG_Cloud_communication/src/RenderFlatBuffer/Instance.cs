// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace RenderFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Instance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Instance GetRootAsInstance(ByteBuffer _bb) { return GetRootAsInstance(_bb, new Instance()); }
  public static Instance GetRootAsInstance(ByteBuffer _bb, Instance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Instance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceIDArray() { return __p.__vector_as_array<byte>(4); }
  public int MaterialID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ProtoID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProtoIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetProtoIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetProtoIDArray() { return __p.__vector_as_array<byte>(8); }
  public string ParentID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParentIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetParentIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetParentIDArray() { return __p.__vector_as_array<byte>(10); }
  public double Matrix(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int MatrixLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetMatrixBytes() { return __p.__vector_as_span<double>(12, 8); }
#else
  public ArraySegment<byte>? GetMatrixBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public double[] GetMatrixArray() { return __p.__vector_as_array<double>(12); }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<RenderFlatBuffer.Instance> CreateInstance(FlatBufferBuilder builder,
      StringOffset InstanceIDOffset = default(StringOffset),
      int MaterialID = 0,
      StringOffset ProtoIDOffset = default(StringOffset),
      StringOffset ParentIDOffset = default(StringOffset),
      VectorOffset MatrixOffset = default(VectorOffset),
      StringOffset NameOffset = default(StringOffset)) {
    builder.StartTable(6);
    Instance.AddName(builder, NameOffset);
    Instance.AddMatrix(builder, MatrixOffset);
    Instance.AddParentID(builder, ParentIDOffset);
    Instance.AddProtoID(builder, ProtoIDOffset);
    Instance.AddMaterialID(builder, MaterialID);
    Instance.AddInstanceID(builder, InstanceIDOffset);
    return Instance.EndInstance(builder);
  }

  public static void StartInstance(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddInstanceID(FlatBufferBuilder builder, StringOffset instanceIDOffset) { builder.AddOffset(0, instanceIDOffset.Value, 0); }
  public static void AddMaterialID(FlatBufferBuilder builder, int materialID) { builder.AddInt(1, materialID, 0); }
  public static void AddProtoID(FlatBufferBuilder builder, StringOffset protoIDOffset) { builder.AddOffset(2, protoIDOffset.Value, 0); }
  public static void AddParentID(FlatBufferBuilder builder, StringOffset parentIDOffset) { builder.AddOffset(3, parentIDOffset.Value, 0); }
  public static void AddMatrix(FlatBufferBuilder builder, VectorOffset matrixOffset) { builder.AddOffset(4, matrixOffset.Value, 0); }
  public static VectorOffset CreateMatrixVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMatrixVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMatrixVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMatrixVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMatrixVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static Offset<RenderFlatBuffer.Instance> EndInstance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RenderFlatBuffer.Instance>(o);
  }
}


static public class InstanceVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*InstanceID*/, false)
      && verifier.VerifyField(tablePos, 6 /*MaterialID*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*ProtoID*/, false)
      && verifier.VerifyString(tablePos, 10 /*ParentID*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Matrix*/, 8 /*double*/, false)
      && verifier.VerifyString(tablePos, 14 /*Name*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
